:root { --space: 20px; }
body { font-family: Arial, sans-serif; margin: 0; padding: var(--space); background:#fafafa; color:#111; }
.container { max-width: 960px; margin: 0 auto; }

/* --- Cardápio básico --- */
.cat-title { margin-top: 28px; font-size: 20px; }
.item-list { list-style: none; padding: 0; margin: 10px 0 0; }
.item-row { display: flex; justify-content: space-between; align-items: flex-start; padding: 10px 0; border-bottom: 1px solid #eee; gap: 10px; }
.item-left { max-width: 75%; }
.item-name { font-weight: 600; }
.item-desc { color: #555; font-size: 14px; margin-top: 2px; }
.item-right { white-space: nowrap; font-weight: 600; }
.item-off { opacity: 0.6; }
'

# 4) Git — commit e push
git add -A

@'
feat(frontend): renderiza cardápio na tela (categorias + itens + preço)

- index.html: adiciona container #menu
- app.js: busca /api/menu e desenha lista por categoria
- style.css: estilos simples para lista

/* --- Carrinho --- */
.cart-summary {
  background: #fff;
  border: 1px solid #eee;
  display: inline-block;
  padding: 8px 12px;
  border-radius: 12px;
  margin-bottom: 12px;
  font-weight: 600;
}

/* --- Botões --- */
.btn {
  appearance: none;
  border: 0;
  padding: 8px 12px;
  border-radius: 10px;
  cursor: pointer;
}
.btn-add {
  background: #111;
  color: #fff;
  margin-top: 6px;
}
.btn:disabled {
  background: #aaa;
  cursor: not-allowed;
  color: #fff;
}

/* preço */
.item-price { text-align: right; margin-bottom: 6px; }
'

# 4) Git — commit e push
git add -A

@'
feat(frontend): botão "Adicionar ao carrinho" + resumo (itens/total)

- index.html: bloco #cartSummary
- app.js: lógica mínima de carrinho (array em memória)
- style.css: estilos para botão e resumo

/* --- Finalização --- */
.order-bar {
  display: flex; gap: 8px; flex-wrap: wrap; align-items: center;
  margin: 8px 0 16px;
}
.order-bar input {
  padding: 8px 10px; border: 1px solid #ddd; border-radius: 8px;
}
.order-msg { margin: 8px 0 12px; font-weight: 600; }
.order-msg.ok { color: #0a7; }
.order-msg.err { color: #c00; }

/* botão primário */
.btn-primary { background: #1a1a1a; color: #fff; }
'

# 4) Git — commit e push
git add -A

@'
feat(frontend): botão "Finalizar Pedido" enviando carrinho para POST /api/orders

- barra com mesa/nome + botão
- envio com validação e mensagens de sucesso/erro

/* token de mesa detectado */
.input-locked { background: #f5f5f5; color: #333; }
.token-info { margin: 6px 0 12px; font-size: 14px; color: #0a7; font-weight: 600; }
'

# 3) Git — commit e push
git add frontend\js\app.js frontend\css\style.css

@'
feat(frontend): token de mesa via ?t= preenche e trava o campo Mesa/Quarto

- lê ?t= da URL e prioriza no POST /api/orders
- estiliza input bloqueado e mostra aviso de mesa detectada

/* quando mesa vem por token, escondemos o input e mostramos info */
.token-info {
  display: inline-block;
  background: #eafaf2;
  border: 1px solid #c6f0d8;
  color: #0a7;
  padding: 6px 10px;
  border-radius: 12px;
  margin: 6px 0 12px;
  font-weight: 600;
}
'

git add frontend\js\app.js frontend\css\style.css
@'
chore(ui): quando ?t= está presente, escondo o input de Mesa e mostro badge de mesa detectada

/* admin upgrades */
.time { font-size: 12px; color:#777; }
.btn-row { display:flex; gap:6px; flex-wrap:wrap; }
.btn-outline { background:#fff; color:#111; border:1px solid #111; }
.switch { display:inline-flex; align-items:center; gap:6px; font-size:14px; }
.switch input { transform: scale(1.2); }
@media print {
  body { margin:0; padding:0; }
}
'

# 2) Atualiza admin.html: toggle som + dica impressão
(Get-Content frontend\admin.html) `
  -replace '(</div>\s*</div>\s*<table>)', '<div class="switch"><input type="checkbox" id="soundToggle"><label for="soundToggle">Som de novos pedidos</label></div>$1' `
| Set-Content -Encoding UTF8 frontend\admin.html

# 3) Atualiza admin.js com tempo, voltar status, imprimir, som
@'
"use strict";

function formataPreco(n) {
  try { return Number(n).toLocaleString("pt-BR", { style: "currency", currency: "BRL" }); }
  catch { return `R$ ${Number(n).toFixed(2)}`; }
}
function getSlug() {
  const u = new URL(location.href);
  return u.searchParams.get("slug") || "bar-do-netto";
}
function isTodayIsoZ(iso) {
  if (!iso) return false;
  const d = new Date(iso); if (isNaN(d)) return false;
  const now = new Date();
  return d.getFullYear()===now.getFullYear() && d.getMonth()===now.getMonth() && d.getDate()===now.getDate();
}
function timeAgo(iso) {
  if (!iso) return "-";
  const s = Math.max(0, (Date.now() - new Date(iso).getTime())/1000|0);
  if (s < 60) return `${s}s`;
  const m = (s/60)|0; if (m < 60) return `${m}m`;
  const h = (m/60)|0; const rm = m%60;
  return `${h}h ${rm}m`;
}

let lastRefreshAt = null;
let rawOrders = [];
let ui = { status: "all", scope: "today", q: "" };
let lastSeenMaxId = 0;
let soundOn = false;
let audioPing = null;

function ensureAudio() {
  if (audioPing) return audioPing;
  // beep simples (440Hz) em base64 (500ms)
  const src = "data:audio/wav;base64,UklGRlQAAABXQVZFZm10IBAAAAABAAEAgD4AAIA+AAACABAAZGF0YTwAAAABAQEBAQEBAQEBAQEBAgICAwMDAwMDAwQEBAUFBQYGBgcHBwgICAkJCgoKCwsLCwsLCwsKCgoJCQgICAf///8AAP//AAD///8AAP//AAD///8AAP//AAAA";
  audioPing = new Audio(src);
  audioPing.volume = 0.6;
  return audioPing;
}

async function fetchOrders() {
  const res = await fetch(`/api/orders?slug=${encodeURIComponent(getSlug())}`, { headers: { "Accept":"application/json" } });
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  return res.json();
}

function applyFilters() {
  let list = [...rawOrders];
  if (ui.scope === "today") list = list.filter(o => isTodayIsoZ(o.created_at));
  if (ui.status !== "all") list = list.filter(o => (o.status||"").toLowerCase() === ui.status);
  const q = ui.q.trim().toLowerCase();
  if (q) {
    list = list.filter(o => {
      const idMatch = ("#"+o.id).toLowerCase().includes(q) || String(o.id).includes(q);
      const mesaMatch = (o.table_code||"").toLowerCase().includes(q);
      const itemsMatch = Array.isArray(o.items) && o.items.some(it =>
        (it.name||"").toLowerCase().includes(q)
      );
      return idMatch || mesaMatch || itemsMatch;
    });
  }
  list.sort((a,b) => {
    const da = new Date(a.created_at||0).getTime();
    const db = new Date(b.created_at||0).getTime();
    if (!isNaN(da) && !isNaN(db) && db!==da) return db-da;
    return (b.id||0) - (a.id||0);
  });
  return list;
}

function nextStatus(cur) {
  const flow = ["received", "preparing", "delivering", "done"];
  const idx = flow.indexOf(cur);
  return idx >= 0 && idx < flow.length - 1 ? flow[idx+1] : cur;
}
function prevStatus(cur) {
  const flow = ["received", "preparing", "delivering", "done"];
  const idx = flow.indexOf(cur);
  return idx > 0 ? flow[idx-1] : cur;
}

async function changeStatus(orderId, newStatus) {
  try {
    const res = await fetch(`/api/orders/${orderId}?slug=${encodeURIComponent(getSlug())}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ status: newStatus })
    });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    await res.json();
    await loadOrders();
  } catch (err) {
    alert("Erro ao atualizar status");
    console.error(err);
  }
}

function printTicket(o) {
  const w = window.open("", "_blank", "width=360,height=600");
  const itemsHtml = (o.items||[]).map(it => `<tr><td>${it.qty}× ${it.name}</td><td style="text-align:right">${formataPreco(it.line_total||0)}</td></tr>`).join("");
  const html = `
    <html><head><meta charset="utf-8"><title>Comanda #${o.id}</title>
    <style>
      body{font-family:Arial,sans-serif;padding:12px}
      h2{margin:0 0 8px}
      table{width:100%;border-collapse:collapse}
      td{padding:4px 0;border-bottom:1px dashed #ddd}
      .muted{color:#666;font-size:12px}
      .tot{font-weight:bold}
    </style></head>
    <body>
      <h2>Comanda #${o.id}</h2>
      <div class="muted">${o.created_at||""} • Mesa: ${o.table_code||"-"}</div>
      <hr/>
      <table>${itemsHtml}</table>
      <p class="tot">Total: ${formataPreco(o.total||0)}</p>
      <script>window.print();<\/script>
    </body></html>`;
  w.document.write(html);
  w.document.close();
}

function render(list) {
  const tbody = document.getElementById("ordersTbody");
  tbody.innerHTML = "";

  if (!list.length) {
    const tr = document.createElement("tr");
    const td = document.createElement("td");
    td.colSpan = 6; td.className = "muted";
    td.textContent = "Nenhum pedido encontrado.";
    tr.appendChild(td); tbody.appendChild(tr); return;
  }

  for (const o of list) {
    const tr = document.createElement("tr");

    const tdId = document.createElement("td");
    tdId.innerHTML = `#${o.id}<div class="time">${timeAgo(o.created_at)} atrás</div>`;

    const tdTable = document.createElement("td");
    tdTable.textContent = o.table_code || "-";

    const tdItems = document.createElement("td");
    if (Array.isArray(o.items) && o.items.length) {
      const ul = document.createElement("ul");
      ul.style.margin = "0"; ul.style.paddingLeft = "16px";
      for (const it of o.items) {
        const li = document.createElement("li");
        const note = it.note ? ` — "${it.note}"` : "";
        li.textContent = `${it.qty}× ${it.name}${note}`;
        ul.appendChild(li);
      }
      tdItems.appendChild(ul);
    } else tdItems.textContent = "-";

    const tdTotal = document.createElement("td");
    tdTotal.textContent = formataPreco(o.total ?? 0);

    const tdStatus = document.createElement("td");
    tdStatus.innerHTML = `<span class="pill">${o.status}</span>`;

    const tdActions = document.createElement("td");
    const row = document.createElement("div");
    row.className = "btn-row";

    const prevBtn = document.createElement("button");
    prevBtn.textContent = "Voltar";
    prevBtn.className = "btn btn-sm btn-outline";
    prevBtn.onclick = () => changeStatus(o.id, prevStatus(o.status));

    const nextBtn = document.createElement("button");
    nextBtn.textContent = "Avançar";
    nextBtn.className = "btn btn-sm";
    nextBtn.onclick = () => changeStatus(o.id, nextStatus(o.status));

    const cancelBtn = document.createElement("button");
    cancelBtn.textContent = "Cancelar";
    cancelBtn.className = "btn btn-sm btn-outline";
    cancelBtn.onclick = () => changeStatus(o.id, "cancelled");

    const printBtn = document.createElement("button");
    printBtn.textContent = "Imprimir";
    printBtn.className = "btn btn-sm btn-outline";
    printBtn.onclick = () => printTicket(o);

    row.appendChild(prevBtn);
    row.appendChild(nextBtn);
    row.appendChild(cancelBtn);
    row.appendChild(printBtn);
    tdActions.appendChild(row);

    tr.appendChild(tdId);
    tr.appendChild(tdTable);
    tr.appendChild(tdItems);
    tr.appendChild(tdTotal);
    tr.appendChild(tdStatus);
    tr.appendChild(tdActions);
    tbody.appendChild(tr);
  }
}

async function loadOrders() {
  const statusEl = document.getElementById("status");
  statusEl.textContent = "Carregando pedidos...";
  try {
    const data = await fetchOrders();
    // detectar novos (id maior do que já vimos)
    const maxId = data.reduce((m,o)=>Math.max(m, o.id||0), 0);
    const isNew = maxId > lastSeenMaxId;
    rawOrders = data;
    const list = applyFilters();
    render(list);
    lastRefreshAt = new Date();
    statusEl.textContent = `Atualizado às ${lastRefreshAt.toLocaleTimeString("pt-BR")} (slug: ${getSlug()})`;

    if (isNew && soundOn) {
      try { ensureAudio().play(); } catch(e) { /* ignore */ }
    }
    lastSeenMaxId = Math.max(lastSeenMaxId, maxId);
  } catch (err) {
    console.error(err);
    statusEl.textContent = "Erro ao carregar pedidos.";
  }
}

// === eventos da UI existentes + novos ===
function bindUI() {
  document.getElementById("btnReload")?.addEventListener("click", loadOrders);
  document.getElementById("dateScope")?.addEventListener("change", (e)=>{ ui.scope = e.target.value; render(applyFilters()); });

  const searchBox = document.getElementById("searchBox");
  if (searchBox) {
    let t=null;
    searchBox.addEventListener("input",(e)=>{
      clearTimeout(t);
      t=setTimeout(()=>{
        ui.q = e.target.value || "";
        render(applyFilters());
      },200);
    });
  }

  const tabs = document.getElementById("tabs");
  tabs?.addEventListener("click",(e)=>{
    const el = e.target.closest(".tab"); if(!el) return;
    [...tabs.querySelectorAll(".tab")].forEach(t=>t.classList.remove("active"));
    el.classList.add("active");
    ui.status = el.dataset.status || "all";
    render(applyFilters());
  });

  const sound = document.getElementById("soundToggle");
  if (sound) {
    sound.checked = false;
    sound.addEventListener("change", ()=>{ soundOn = sound.checked; if (soundOn) ensureAudio(); });
  }
}

// init
bindUI();
loadOrders();
setInterval(loadOrders, 5000);

/* histórico da mesa */
.history { margin-top: 24px; border-top: 1px solid #eee; padding-top: 16px; }
.hist-loading, .hist-empty { color:#666; font-size:14px; }
.hist-list { list-style:none; padding:0; margin:10px 0; }
.hist-line { padding:6px 0; border-bottom:1px dashed #eee; }
.hist-id { font-weight:700; margin-right:6px; }
.hist-time { color:#888; margin-right:6px; }
'

# 4) FRONTEND — criar botão "Histórico" ao lado do botão principal, sem quebrar layout
# Inserimos via JS para não mexer demais no HTML
Add-Content -Encoding UTF8 frontend\js\app.js @'

(function injectHistoryButton(){
  const btn = document.getElementById("btnCheckout");
  if (!btn) return;
  btn.textContent = "Solicitar Pedido"; // troca rótulo
  const hist = document.createElement("button");
  hist.type = "button";
  hist.className = "btn";
  hist.style.marginLeft = "8px";
  hist.textContent = "Histórico";
  hist.addEventListener("click", loadHistory);
  btn.insertAdjacentElement("afterend", hist);

  // se a mesa vier por token, já carrega histórico automaticamente
  const tok = (new URL(location.href)).searchParams.get("t");
  if (tok) { setTimeout(loadHistory, 200); }
})();
'

# 5) Commit e push (gatilha deploy)
git add backend\server.py frontend\index.html frontend\js\app.js frontend\css\style.css
@'
feat(cliente): trocar "Finalizar Pedido" por "Solicitar Pedido" e adicionar "Histórico da Mesa"

- backend: GET /api/my-orders?slug=&table= (público) retorna pedidos da mesa (hoje)
- frontend: botão "Histórico" e listagem com tempo, itens e total
/* botões padrão (cliente) */
.btn { padding:10px 14px; border:0; border-radius:8px; background:#111; color:#fff; cursor:pointer; }
.btn-outline { background:#fff; color:#111; border:1px solid #111; }
.btn + .btn { margin-left:8px; }
.actions { margin: 14px 0; display:flex; flex-wrap:wrap; gap:8px; }
/* resumo de mesas */
.tabs-summary { margin: 18px 0; }
.grid { display:grid; grid-template-columns: repeat(auto-fill, minmax(240px,1fr)); gap:12px; }
.card { border:1px solid #eee; border-radius:10px; padding:12px; background:#fff; }
.card h3 { margin:0 0 8px; }
.badge { display:inline-block; padding:2px 8px; border-radius:10px; font-size:12px; }
.badge.open { background:#ffe; border:1px solid #ddc; }
.badge.closed { background:#eef7ef; border:1px solid #cfe6d2; }
.card .row { display:flex; justify-content:space-between; margin:6px 0; }
.card .actions { margin-top:8px; }
/* resumo de mesas (admin) */
.tabs-summary { margin: 18px 0; }
.grid { display:grid; grid-template-columns: repeat(auto-fill, minmax(240px,1fr)); gap:12px; }
.card { border:1px solid #eee; border-radius:10px; padding:12px; background:#fff; }
.card h3 { margin:0 0 8px; }
.badge { display:inline-block; padding:2px 8px; border-radius:10px; font-size:12px; }
.badge.open { background:#ffe; border:1px solid #ddc; }
.badge.closed { background:#eef7ef; border:1px solid #cfe6d2; }
.card .row { display:flex; justify-content:space-between; margin:6px 0; }
.card .actions { margin-top:8px; }
/* resumo de mesas (admin) */
.tabs-summary { margin: 18px 0; }
.grid { display:grid; grid-template-columns: repeat(auto-fill, minmax(240px,1fr)); gap:12px; }
.card { border:1px solid #eee; border-radius:10px; padding:12px; background:#fff; }
.card h3 { margin:0 0 8px; }
.badge { display:inline-block; padding:2px 8px; border-radius:10px; font-size:12px; }
.badge.open { background:#ffe; border:1px solid #ddc; }
.badge.closed { background:#eef7ef; border:1px solid #cfe6d2; }
.card .row { display:flex; justify-content:space-between; margin:6px 0; }
.card .actions { margin-top:8px; }
/* mostra só a primeira seção "Mesas de hoje" se houver duplicatas */
.tabs-summary { display:none; }
.tabs-summary:first-of-type { display:block; }
/* override: mostrar seção normalmente; JS cuida das duplicatas */
.tabs-summary { display:block !important; }
/* mantém visível só a primeira seção "Mesas de hoje" caso o HTML venha duplicado */


/* --- Header com logo --- */
.site-header { background:#fff; border-bottom:1px solid #eee; position:sticky; top:0; z-index:10; }
.hdr { display:flex; align-items:center; gap:12px; padding:10px 0; }
.logo { height:40px; width:auto; object-fit:contain; }
.brand-name { font-size:18px; font-weight:700; line-height:1.1; }
.brand-sub { font-size:12px; color:#777; }

/* --- Polimento leve global --- */
:root { --space: 20px; --accent:#111; }
body { font-family: system-ui, Arial, sans-serif; line-height:1.45; color:#111; background:#fafafa; }
.container { max-width: 980px; margin: 0 auto; padding: 0 var(--space); }
h1,h2,h3 { letter-spacing:.2px; }
a { color: var(--accent); text-decoration: none; }
.btn { padding:10px 14px; border:0; border-radius:8px; background:var(--accent); color:#fff; cursor:pointer; }
.btn:hover { filter: brightness(0.9); }
.btn-outline { background:#fff; color:var(--accent); border:1px solid var(--accent); }
.btn:disabled { opacity:.5; cursor:not-allowed; }

/* --- Lista do cardápio (respiro) --- */
.item-row { display:flex; justify-content:space-between; align-items:flex-start; padding:12px 0; border-bottom:1px solid #eee; gap:12px; }
.item-name { font-weight:600; font-size:16px; }
.item-desc { color:#555; font-size:13px; margin-top:2px; }
.item-right { white-space:nowrap; font-weight:700; }

/* --- Cards Mesas de hoje --- */
.grid { display:grid; grid-template-columns: repeat(auto-fill, minmax(240px,1fr)); gap:12px; }
.card { border:1px solid #eee; border-radius:12px; padding:12px; background:#fff; }
.badge { display:inline-block; padding:2px 8px; border-radius:10px; font-size:12px; }
.badge.open { background:#ffe; border:1px solid #ddc; }
.badge.closed { background:#eef7ef; border:1px solid #cfe6d2; }
/* header com logo */
.site-header{background:#fff;border-bottom:1px solid #eee;position:sticky;top:0;z-index:10}
.hdr{display:flex;align-items:center;gap:12px;padding:10px 0}
.logo{height:40px;width:auto;object-fit:contain}
.brand-name{font-size:18px;font-weight:700;line-height:1.1;color:#174A78}
.brand-sub{font-size:12px;color:#777}
/* ===== Tema azul/branco ===== */
:root{
  --brand:#0d6efd;        /* azul primário */
  --brand-600:#0b5ed7;
  --brand-50:#eef5ff;
  --ink:#111;
  --muted:#555;
  --radius:12px;
  --space:20px;
}

body { background:#fff; color:var(--ink); }

.container { max-width: 960px; margin: 0 auto; padding: 0 var(--space); }

.site-header {
  background: var(--brand);
  color: #fff;
  padding: 10px 0;
  margin-bottom: 14px;
  box-shadow: 0 2px 6px rgba(0,0,0,.08);
}
.header-inner { display:flex; align-items:center; gap:12px; }
.logo { width: 44px; height: 44px; object-fit: cover; border-radius: 8px; background:#fff; }
.brand strong { display:block; font-size: 18px; line-height:1.2; }
.brand small { display:block; opacity:.9; }

a { color: var(--brand); text-decoration: none; }
a:hover { text-decoration: underline; }

.btn { padding:10px 14px; border:0; border-radius:10px; background:var(--brand); color:#fff; cursor:pointer; }
.btn:hover { background: var(--brand-600); }
.btn-outline { background:#fff; color:var(--brand); border:1px solid var(--brand); }
.btn + .btn { margin-left:8px; }
.actions { margin: 14px 0; display:flex; flex-wrap:wrap; gap:8px; }

.cat-title { margin-top: 28px; font-size: 20px; border-left:4px solid var(--brand); padding-left:8px; }
.item-list { list-style: none; padding: 0; margin: 10px 0 0; }
.item-row { display:flex; justify-content:space-between; align-items:flex-start; gap:10px;
  padding:12px; border:1px solid #eee; border-radius: var(--radius); margin-bottom:10px; background:#fff; }
.item-left { max-width: 75%; }
.item-name { font-weight: 700; }
.item-desc { color: var(--muted); font-size: 14px; margin-top: 2px; }
.item-right { white-space: nowrap; font-weight: 700; color: var(--brand); }
.item-off { opacity: .6; filter: grayscale(0.2); }

/* cards simples úteis no admin */
.card { background:#fff; border:1px solid #eee; border-radius: var(--radius); padding:12px; }
.card + .card { margin-top: 10px; }
/* estados / avisos */
.btn[disabled]{ opacity:.6; cursor:not-allowed; }
.toast { position:fixed; left:50%; bottom:24px; transform:translateX(-50%);
  background:#111; color:#fff; padding:10px 14px; border-radius:10px; box-shadow:0 4px 18px rgba(0,0,0,.15); z-index:9999; }
/* histórico (entregues) */
.history-head{margin:12px 0 8px;padding:8px 12px;background:#f4f6ff;border:1px solid #e3e8ff;border-radius:8px}
.history-empty{color:#666;padding:6px 2px}
.history-order{border:1px solid #eee;border-radius:8px;padding:10px;margin:10px 0}
.h-row{display:flex;justify-content:space-between;margin-bottom:6px}
.h-item{display:flex;justify-content:space-between;color:#444;padding:2px 0}
/* ==== ADMIN: alinhamento e lista de itens ==== */
table { border-collapse: collapse; width: 100%; }
table th, table td { vertical-align: top; }  /* colunas no topo */
.item-row { display:flex; justify-content:space-between; gap:8px; padding:4px 0; border-bottom:1px dashed #eee; }
.item-row:last-child { border-bottom:0; }
.btn-mini { padding:4px 8px; font-size:12px; border-radius:6px; cursor:pointer; }
/* --- ADMIN: correções de tabela e itens --- */
.admin-table { table-layout: fixed; width: 100%; }
.admin-table th, .admin-table td { vertical-align: top; }
.admin-col-id   { width: 60px;   white-space: nowrap; }
.admin-col-mesa { width: 80px;   white-space: nowrap; }
.admin-col-tot  { width: 110px;  white-space: nowrap; text-align:left; }
.admin-col-sta  { width: 110px;  white-space: nowrap; }
.admin-col-act  { width: 160px;  white-space: nowrap; }

/* célula de itens vira uma coluna flex (um item por linha) */
.items-col { display: flex; flex-direction: column; gap: 6px; }

/* cada item em uma linha com botão à direita */
.item-row { display: flex; justify-content: space-between; align-items: center; gap: 10px; }
.item-text { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }

/* botão pequeno e enxuto */
.btn-small { padding: 4px 8px; font-size: 12px; border-radius: 6px; cursor: pointer; }
.btn-small.entregar-btn { border: 1px solid #0a58ca; background:#fff; color:#0a58ca; }
.btn-small.entregar-btn:hover { background:#0a58ca; color:#fff; }

/* opcional: esconder "Avançar" em Ações se ainda existir */
.actions-cell .btn-advance { display: none !important; }
/* ADMIN layout fix */
.admin-table { table-layout: fixed; width:100%; }
.admin-table th, .admin-table td { vertical-align: top; }
.admin-col-id{width:60px;white-space:nowrap}
.admin-col-mesa{width:80px;white-space:nowrap}
.admin-col-tot{width:110px;white-space:nowrap;text-align:left}
.admin-col-sta{width:110px;white-space:nowrap}
.admin-col-act{width:160px;white-space:nowrap}
.items-col{display:flex;flex-direction:column;gap:6px}
.item-row{display:flex;justify-content:space-between;align-items:center;gap:10px}
.item-text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}
.btn-small{padding:4px 8px;font-size:12px;border-radius:6px;cursor:pointer}
.btn-small.entregar-btn{border:1px solid #0a58ca;background:#fff;color:#0a58ca}
.btn-small.entregar-btn:hover{background:#0a58ca;color:#fff}
/* --- ADMIN layout harden --- */
.admin-table { table-layout: fixed; width:100%; }
.admin-table th, .admin-table td { vertical-align: top; }
.admin-col-id{width:60px;white-space:nowrap}
.admin-col-mesa{width:80px;white-space:nowrap}
.admin-col-tot{width:120px;white-space:nowrap;text-align:right}
.admin-col-sta{width:110px;white-space:nowrap}
.admin-col-act{width:160px;white-space:nowrap}
.items-col{display:flex;flex-direction:column;gap:6px;min-width:420px}
.item-row{display:flex;align-items:center;justify-content:space-between;gap:8px}
.item-text{flex:1 1 auto;min-width:0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
.btn-small{padding:2px 8px;line-height:1.2;border-radius:6px;cursor:pointer}
.btn-small.entregar-btn{border:1px solid #0a58ca;background:#fff;color:#0a58ca}
.btn-small.entregar-btn:hover{background:#0a58ca;color:#fff}
/* --- ADMIN layout fix v2 --- */
.admin-table { table-layout: fixed; width:100%; }
.admin-table th, .admin-table td { vertical-align: top; }
.admin-col-id{width:60px;white-space:nowrap}
.admin-col-mesa{width:80px;white-space:nowrap}
.items-col{min-width:420px}
.admin-col-tot{width:120px;white-space:nowrap;text-align:right}
.admin-col-sta{width:110px;white-space:nowrap}
.admin-col-act{width:160px;white-space:nowrap;text-align:left}
.item-row{display:flex;align-items:center;justify-content:space-between;gap:8px}
.item-text{flex:1 1 auto;min-width:0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
.btn-small{padding:2px 8px;line-height:1.2;border-radius:6px;cursor:pointer}
.btn-small.entregar-btn{border:1px solid #0a58ca;background:#fff;color:#0a58ca}
.btn-small.entregar-btn:hover{background:#0a58ca;color:#fff}
/* --- Painel (admin) fix --- */
.table-admin td, .table-admin th { vertical-align: top; }
.td-total, .td-status, .td-actions { white-space: nowrap; }
.item-row { display:flex; align-items:center; gap:10px; margin:6px 0; }
.item-text { flex:1 1 auto; }
.btn-entregar { padding:4px 10px; border:0; border-radius:6px; cursor:pointer; }
.btn-entregar { background:#111; color:#fff; }
.item-ok { color:#2e7d32; }     /* ✓ Entregue */
/* --- Painel (admin) fix --- */
.table-admin td, .table-admin th { vertical-align: top; }
.td-total, .td-status, .td-actions { white-space: nowrap; }
.item-row { display:flex; align-items:center; gap:10px; margin:6px 0; }
.item-text { flex:1 1 auto; }
.btn-entregar { padding:4px 10px; border:0; border-radius:6px; cursor:pointer; }
.btn-entregar { background:#111; color:#fff; }
.item-ok { color:#2e7d32; }     /* ✓ Entregue */
.admin-table { table-layout: fixed; width:100%; }
.admin-table th, .admin-table td { vertical-align: top; }
.admin-col-id{width:60px;white-space:nowrap}
.admin-col-mesa{width:80px;white-space:nowrap}
.items-col{min-width:420px}
.admin-col-tot{width:120px;white-space:nowrap;text-align:right}
.admin-col-sta{width:110px;white-space:nowrap}
.admin-col-act{width:160px;white-space:nowrap;text-align:left}
.item-row{display:flex;align-items:center;justify-content:space-between;gap:8px;margin:6px 0;}
.item-text{flex:1 1 auto;min-width:0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
.btn-small{padding:2px 8px;line-height:1.2;border-radius:6px;cursor:pointer}
.btn-small.entregar-btn{border:1px solid #0a58ca;background:#fff;color:#0a58ca}
.btn-small.entregar-btn:hover{background:#0a58ca;color:#fff}
/* admin cols (safe) */
.table-admin td, .table-admin th { vertical-align: top; }
.admin-col-id{width:60px;white-space:nowrap}
.admin-col-mesa{width:80px;white-space:nowrap}
.admin-col-itens{min-width:420px}
.admin-col-total{width:120px;white-space:nowrap;text-align:right}
.admin-col-status{width:110px;white-space:nowrap}
.admin-col-acoes{width:160px;white-space:nowrap}
